{"version":3,"sources":["pages/PhoneCalendar.js"],"names":["PhoneCalendar","hash","useLocation","dispatch","useDispatch","account","useActiveWeb3React","useState","tab","setTab","setIsLoading","network","useSelector","state","chainId","imgRef","useRef","useEffect","el","current","gsap","fromTo","opacity","duration","scrollTrigger","trigger","start","toggleActions","unmounted","getPools","allMonthValues","selectedDate","setSelectedDate","setCalendarText","title","style","backgroundColor","paddingLeft","paddingRight","justifyContent","display","marginBottom","onClickMonth","value","monthValue","getMonth","onClickYear","yearValue","getFullYear","onChange","toDateString","Event","events","day","fromto","weekDay","props","margintop","map","event","EventCard","padding","container","borderRadius","item","xs","fontSize","color"],"mappings":"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","file":"static/js/39.760f7239.chunk.js","sourcesContent":["import \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport React from 'react'\r\nimport Page from 'components/Page';\r\nimport { getPools } from 'redux/slices/pools';\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport gsap from 'gsap';\r\nimport Loader from 'react-loader-spinner';\r\n// import { Calendar, momentLocalizer } from \"react-big-calendar\";\r\nimport {Calendar} from 'react-calendar'\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport {Box, Grid} from '@mui/material'\r\n\r\nimport { Eventcalendar, getJson, setOptions, CalendarNav, \r\n    SegmentedGroup, SegmentedItem, CalendarPrev, CalendarNext } from '@mobiscroll/react-lite';\r\n\r\n// setOptions({\r\n//     theme: 'ios',\r\n//     themeVariant: 'light'\r\n// });\r\n\r\n// moment.locale(\"en-GB\");\r\n// const localizer = momentLocalizer(moment);\r\n\r\nexport default function PhoneCalendar() {\r\n  const { hash } = useLocation();\r\n  const dispatch = useDispatch();\r\n  const { account } = useActiveWeb3React();\r\n\r\n  //Pagination part\r\n  const [tab, setTab] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const network = useSelector((state) => state.network.chainId);\r\n  const imgRef = useRef(null);\r\n  useEffect(() => {\r\n    const el = imgRef.current;\r\n    gsap.fromTo(el, {opacity: 0}, {opacity: 1, duration: 2, scrollTrigger:{\r\n      trigger : el,\r\n      start: \"top bottom\",\r\n      // end: \"top bottom\",\r\n      toggleActions: \"restart pause restart none\"\r\n    }})\r\n  })\r\n\r\n  //--------------------\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    (async () => {\r\n      setIsLoading(true);\r\n      await dispatch(getPools(network, tab, account));\r\n      if (!unmounted)\r\n        setIsLoading(false);\r\n    })();\r\n    return () => unmounted = true;\r\n  }, [account, dispatch, network, tab]);\r\n\r\n  useEffect(() => {\r\n    switch (hash) {\r\n      case '#my-contributions':\r\n        setTab(1);\r\n        break;\r\n      case '#my-alarms':\r\n        setTab(2);\r\n        break;\r\n      case '#my-presales':\r\n        setTab(3);\r\n        break;\r\n      default:\r\n        setTab(0);\r\n    }\r\n  }, [hash]);\r\n  // const Item = styled(Paper)(({ theme }) => ({\r\n  //   backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\r\n  //   ...theme.typography.body2,\r\n  //   padding: theme.spacing(2),\r\n  //   textAlign: 'center',\r\n  //   color: theme.palette.text.secondary,\r\n  // }));\r\n  \r\n  const allMonthValues = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"\r\n  ];\r\n  \r\n  const [selectedDate, setSelectedDate] = useState();\r\n  const [calendarText, setCalendarText] = useState(`No Date is selected`);\r\n  const handleDateChange = (value) => {\r\n    setSelectedDate(value);\r\n    setCalendarText(`The selected Date is ${value.toDateString()}`);\r\n  };\r\n  const handleYearChange = (value) => {\r\n    const yearValue = value.getFullYear();\r\n    setCalendarText(`${yearValue} Year  is selected`);\r\n  };\r\n  const handleMonthChange = (value) => {\r\n    const monthValue = allMonthValues[value.getMonth()];\r\n    setCalendarText(`${monthValue} Month  is selected`);\r\n  };\r\n  // const [myEvents, setEvents] = React.useState([]);\r\n\r\n  //   React.useEffect(() => {\r\n  //       getJson('https://trial.mobiscroll.com/events/?vers=5', (events) => {\r\n  //           setEvents(events);\r\n  //       }, 'jsonp');\r\n  //   }, []);\r\n    \r\n  //   const onEventClick = React.useCallback((event) => {\r\n  //       toast({\r\n  //           message: event.event.title\r\n  //       });\r\n  //   }, []);\r\n    \r\n  //   const view = React.useMemo(() => {\r\n  //       return {\r\n  //           calendar: { type: 'month' },\r\n  //           agenda: { type: 'month' }\r\n  //       };\r\n  //   }, []);\r\n  const events = [\r\n    {\r\n      day : 7,\r\n      title : 'Lorem Ipsum',\r\n      fromto : '15:00pm to 17:00pm',\r\n      weekDay : 'Thu'\r\n    },\r\n    {\r\n      day : 18,\r\n      title : 'Lorem Ipsum',\r\n      fromto : '16:00pm to 18:00pm',\r\n      weekDay : 'Sat'\r\n    },\r\n    {\r\n      day : 22,\r\n      title : 'Lorem Ipsum',\r\n      fromto : '16:00pm to 18:00pm',\r\n      weekDay : 'Wed'\r\n    },\r\n    {\r\n      day : 30,\r\n      title : 'Lorem Ipsum',\r\n      fromto : '16:00pm to 19:00pm',\r\n      weekDay : 'Wed'\r\n    },\r\n  ]\r\n  return (\r\n    <> \r\n    <Page title=\"Megacapital\"  style={{backgroundColor:\"#171819\"}} paddingLeft=\"5px\" paddingRight=\"5px\">\r\n      <Box justifyContent=\"center\" display=\"flex\" marginBottom=\"30px\">\r\n          <Calendar\r\n          onClickMonth={handleMonthChange}\r\n          onClickYear={handleYearChange}\r\n          onChange={handleDateChange}\r\n          value={selectedDate}\r\n          />\r\n      </Box>\r\n      <Event events={events}/>\r\n      </Page>\r\n    </>\r\n  );\r\n}\r\nfunction Event(props){\r\n  return(\r\n    <>\r\n    <Box margintop=\"20px\">\r\n    {props.events.map((event) => (\r\n      <EventCard event={event}/>\r\n    ))}\r\n    </Box>\r\n    </>\r\n  );\r\n}\r\nfunction EventCard(props){\r\n  const event = props.event;\r\n  return(\r\n    <>\r\n    <Box display=\"flex\" justifyContent=\"center\" padding=\"0 10px\">\r\n      <Grid container marginBottom=\"20px\" backgroundColor=\"#232323\" borderRadius={1} padding=\"10px 20px\">\r\n        <Grid item xs={2} fontSize={16} color=\"white\">{event.day}</Grid>\r\n        <Grid item xs={10} fontSize={14} color=\"white\">{event.title}</Grid>\r\n        <Grid item xs={2} fontSize={12} color=\"#24B6E6\">{event.weekDay}</Grid>\r\n        <Grid item xs={10} fontSize={12} color=\"#24B6E6\">{event.fromto}</Grid>\r\n      </Grid>\r\n      </Box>\r\n    </>\r\n  );\r\n}"],"sourceRoot":""}