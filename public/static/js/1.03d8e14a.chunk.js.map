{"version":3,"sources":["hooks/useContract.js"],"names":["useContract","address","ABI","withSignerIfPossible","useActiveWeb3React","library","account","useMemo","getContract","undefined","error","console","useTokenContract","tokenAddress","ERC20_ABI","usePoolContract","poolAddress","POOL_ABI","useIDOContract","network","useSelector","state","chainId","IDO_ADDRESS","IDO_ABI","useLockContract","LOCK_ADDRESS","LOCK_ABI","useStakingContract","contractAddress","STAKING_ABI"],"mappings":"mGAAA,0QAcA,SAASA,EAAYC,EAASC,GAAmC,IAA9BC,IAA6B,yDAC9D,EAA6BC,cAArBC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAGjB,OAAOC,mBAAQ,WACb,IAAKN,IAAYC,IAAQG,EAAS,OAAO,KACzC,IAEE,OAAOG,YAAYP,EAASC,EAAKG,EAASF,GAAwBG,EAAUA,OAAUG,EAIvF,CAHC,MAAOC,GAEP,OADAC,QAAQD,MAAM,yBAA0BA,GACjC,IACR,CACF,GAAE,CAACT,EAASC,EAAKG,EAASF,EAAsBG,GAClD,CAEM,SAASM,EAAiBC,GAA4C,IAA9BV,IAA6B,yDAC1E,OAAOH,EAAYa,EAAcC,EAAWX,EAC7C,CAEM,SAASY,EAAgBC,GAA2C,IAA9Bb,IAA6B,yDACxE,OAAOH,EAAYgB,EAAaC,EAAUd,EAC3C,CAEM,SAASe,IAA6C,IAA9Bf,IAA6B,yDACpDgB,EAAUC,aAAY,SAACC,GAAD,OAAWA,EAAMF,QAAQG,OAAzB,IAC5B,OAAOtB,EAAYuB,IAAYJ,GAAUK,EAASrB,EACnD,CACM,SAASsB,IAA8C,IAA9BtB,IAA6B,yDACrDgB,EAAUC,aAAY,SAACC,GAAD,OAAWA,EAAMF,QAAQG,OAAzB,IAC5B,OAAOtB,EAAY0B,IAAaP,GAAUQ,EAAUxB,EACrD,CAEM,SAASyB,EAAmBC,GAA+C,IAA9B1B,IAA6B,yDAC/DiB,aAAY,SAACC,GAAD,OAAWA,EAAMF,QAAQG,OAAzB,IAE5B,OAAOtB,EAAY6B,EAAiBC,EAAa3B,EAClD,C","file":"static/js/1.03d8e14a.chunk.js","sourcesContent":["import { useMemo } from 'react';\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\r\nimport ERC20_ABI from 'config/abi/erc20.json';\r\nimport IDO_ABI from 'config/abi/ido.json';\r\nimport LOCK_ABI from 'config/abi/lock.json';\r\nimport POOL_ABI from 'config/abi/pool.json';\r\nimport STAKING_ABI from 'config/abi/staking.json';\r\nimport { IDO_ADDRESS, LOCK_ADDRESS, STAKING_ADDRESS } from 'config/constants';\r\n// Imports below migrated from Exchange useContract.ts\r\nimport { Contract } from '@ethersproject/contracts';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { getContract } from 'utils/contract';\r\n\r\nfunction useContract(address, ABI, withSignerIfPossible = true) {\r\n  const { library, account } = useActiveWeb3React();\r\n  // console.log(\"useContract\",library)\r\n  // console.log(\"useContract\",account)\r\n  return useMemo(() => {\r\n    if (!address || !ABI || !library) return null;\r\n    try {\r\n      // console.log(\"inTRY\")\r\n      return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined);\r\n    } catch (error) {\r\n      console.error('Failed to get contract', error);\r\n      return null;\r\n    }\r\n  }, [address, ABI, library, withSignerIfPossible, account]);\r\n}\r\n\r\nexport function useTokenContract(tokenAddress, withSignerIfPossible = true) {\r\n  return useContract(tokenAddress, ERC20_ABI, withSignerIfPossible);\r\n}\r\n\r\nexport function usePoolContract(poolAddress, withSignerIfPossible = true) {\r\n  return useContract(poolAddress, POOL_ABI, withSignerIfPossible);\r\n}\r\n\r\nexport function useIDOContract(withSignerIfPossible = true) {\r\n  const network = useSelector((state) => state.network.chainId);\r\n  return useContract(IDO_ADDRESS[network], IDO_ABI, withSignerIfPossible);\r\n}\r\nexport function useLockContract(withSignerIfPossible = true) {\r\n  const network = useSelector((state) => state.network.chainId);\r\n  return useContract(LOCK_ADDRESS[network], LOCK_ABI, withSignerIfPossible);\r\n}\r\n\r\nexport function useStakingContract(contractAddress, withSignerIfPossible = true) {\r\n  const network = useSelector((state) => state.network.chainId);\r\n \r\n  return useContract(contractAddress, STAKING_ABI, withSignerIfPossible);\r\n}\r\n"],"sourceRoot":""}